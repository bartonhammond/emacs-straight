'use strict';

var React = require('react-native');
var {
  StyleSheet,
  Text,
  View,
  ListView,
  TouchableHighlight,
} = React;

var EventEmitter = require('EventEmitter');

var Icon = require('react-native-vector-icons/FontAwesome');

var FBSDKLogin = require('react-native-fbsdklogin');
var {
  FBSDKLoginManager,
} = FBSDKLogin;

const POWEROFF = 'power-off';

var SettingsList = React.createClass({
  getInitialState: function() {
    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});
    return {
      dataSource: ds.cloneWithRows(this._genRows({}))
    }
  },
  _genRows: function() {
      var dataBlob = [];
      dataBlob.push({icon: POWEROFF, text: 'Log off'})
      return dataBlob;
  },
  _pressRow: function(icon) {
     switch(icon) {
       case(POWEROFF):
         FBSDKLoginManager.logOut();

         this.props.eventEmitter.emit('logout', { });
         break;
        default:
         alert('invalid require: ' + icon);
     }
   },

  _renderRow: function(rowData, sectionID, rowID) {
     return (
     <TouchableHighlight onPress={() => this._pressRow(rowData.icon)}>
       <View>
       <View style={styles.row}>
           <Icon
             size={20}
             color="blue"
             name={rowData.icon}></Icon>
           <Text style={styles.text}>
             {rowData.text}
           </Text>
         </View>
         <View style={styles.separator} />
       </View>
     </TouchableHighlight>
   );
 },

  render() {
    return (
      <ListView style={{
          flex: 1,
          marginTop: 40
        }}
         dataSource={this.state.dataSource}
         renderRow={this._renderRow}
       />
    )
  }

})

var styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    justifyContent: 'center',
    padding: 10,
    backgroundColor: '#F6F6F6',
  },
  separator: {
    height: 1,
    backgroundColor: '#CCCCCC',
  },
  text: {
    flex: 1,
    marginLeft: 10
  },
});

module.exports = SettingsList;
