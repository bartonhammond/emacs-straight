<?php
namespace Automate;
require_once __DIR__ . '/../../vendor/autoload.php';
require_once './src/utilities/curlSupport.php';
require_once './src/utilities/readTestDirectory.php';
require_once './src/utilities/runScreenShots.php';
/*
 * Run the ScreenShots 
 * For each URL, this will take ScreenShots for all the browsers
 * defined in the 'automate.json' file.
 * 
 */
class RunScreenshots{
    protected $user;
    protected $authkey;

	protected $baseUrl = "https://crossbrowsertesting.com/api/v3/screenshots";
    protected $fileName = "screenShotsUrl.json";

	protected $currentTest = NULL;
    protected $screenshotID;
    protected $curlSupport;
    
    protected $mapOfUrls;
    
    protected $homeDir;
    protected $directory;
    protected $testDir;
    
	function __construct($username, $authkey) {
		$this->user = $username;
		$this->authkey = $authkey;
        $this->curlSupport = new CurlSupport($username, $authkey);
        $this->mapOfUrls;
        $this->testDir  = __DIR__ . '/../../test';

        $this->screenShots = new ScreenShots($this->username,
                                             $this->authkey);
	}

    function main() {
        $dirs = new \Automate\ReadTestDirectory();
        $testSuites = $dirs->readDirectory($this->testDir, "/project.json");

        //A $testSuite constains the directory names to be processed
        //in the "tests". such as UWCE & EverydayFit
        foreach ($testSuites as $testSuite) {

            foreach($testSuite['tests'] as $test) {
                $automate = json_decode(file_get_contents($testSuite['directory'] . '/' . $test .  "/automate.json"));
                if (isset($automate->screenshots) ) {
                    $this->mapOfUrls = $this->screenShots->getScreenShotURLs($testSuite['directory'] . '/' . $test . "/" . $fileName);
                    var_dump($this->mapOfUrls);
                }
            }//$test
        }//$testSuite
        
    }
	function isTestComplete(){
		$this->currentTest = $this->updateTestInfo();
		return !$this->currentTest->versions[0]->active;
	}

	function getTestId(){
		return $this->currentTest->screenshot_test_id;
	}
    function getVersionId() {
        return $this->currentTest->versions[0]->version_id;
    }

    function updateTestInfo(){
		$url = $this->baseUrl . "/" . $this->getTestId();
		return $this->curlSupport->callApi($url, 'GET');
	}
    /*
     * For all the saved URLs, do screenshots of each URL
     * The list of browsers is stored in the CBT Comparison 
     * site
     */
    function takeAllScreenShots() {
        $keys = $this->mapOfUrls->keys();
        $count = 0;
        foreach($keys as $key) {
            $screenshot = $this->mapOfUrls->get($key);
            if (!is_numeric(substr($screenshot['url'], -1, 1))){
                $screenshot = $this->takeScreenShots($screenshot);
                $this->mapOfUrls->put($key, $screenshot);
                $this->saveResults($count . '.json');
                $this->doComparison($screenshot, $count . '.json');
                $count++;
            }
        }
        $this->saveUrls();
    }
    /*
     * Submit a request for screenshots
     * Update the screenshot data for base, version id and target
     * version id so that subsequently we can do the comparison
     */
    function takeScreenShots($screenshot){

        //set parameters we want for the screenshot test
        $params["url"] = $screenshot['url'];
        $params["browser_list_name"] = "wisnet-browsers";
        $params["login"] = "UWCE-admin";
        $params["hide_fixed_elements"] = true;
        $params["check_url"] = true;

        //if test id provided initialize this test to that test data
        if (!empty($screenshot['base_test_id'])) {
            echo "screenshot id is NOT empty\n";
            $url = $this->baseUrl
                 . "/"
                 . $screenshot['base_test_id']
                 . "/"
                 . $screenshot['base_version_id'];
            $this->currentTest = $this->curlSupport->callApi($url, 'POST');
        } else {
            echo "screenshot id is empty\n";            
            $this->currentTest = $this->curlSupport->callApi($this->baseUrl, 'POST', $params);
        }
        //Keep waiting for the test to finish
        while (TRUE) {
            if ($this->isTestComplete()){
                //If first time, set that as "Base"
                //Will need to control this via the UI eventually
                if (empty($screenshot['base_test_id'])) {
                    $screenshot['base_test_id'] = $this->getTestId();
                    $screenshot['base_version_id'] = $this->getVersionId();
                } else {
                    $screenshot['target_version_id'] = $this->getVersionId();
                }
                return $screenshot;
            }
            else {
                sleep(2);
            }
        }
        
    }
    /*
     * Save all the JSON that has the images for all the browsers with 
     * screenshots
     */
    function saveResults( $fileName) {
        if (!file_exists($this->directory . "/screenshots")) {
            mkdir($this->directory. "/screenshots", 0777, true);
        }
        $url = "https://crossbrowsertesting.com/api/v3/screenshots/" . $this->getTestId() . '?format=json';
        
        $response = $this->curlSupport->callApi($url, 'GET');
        
        file_put_contents($this->directory . "/screenshots/" . $fileName,
                          json_encode($response,
                                      JSON_PRETTY_PRINT),
                          LOCK_EX);
    
    }
    /*
     * Compare the base id/version w/ the new version
     */
    function doComparison($screenshot, $fileName) {
        if (!empty($screenshot['base_test_id'])
            &&
            !empty($screenshot['base_version_id'])
            &&
            !empty($screenshot['target_version_id'])) {
                    
            $url = "https://crossbrowsertesting.com/api/v3/screenshots/"
                 . $screenshot['base_test_id']
                 . "/"
                 . $screenshot['target_version_id']
                 . "/comparison/parallel/"
                 . $screenshot['base_version_id']
                 . "?format=json&tolerance=30";
        
            $response = $this->curlSupport->callApi($url, 'GET');
        
            file_put_contents($this->directory . "/screenshots/compare-" . $fileName,
                              json_encode($response,
                                          JSON_PRETTY_PRINT),
                              LOCK_EX);
        }

    }

} //class
$username = "bhammond@wisnet.com";
$authkey = "u0459a8738c4a60d";

$runner = new RunScreenShots($username, $authkey);
$runner->main();
