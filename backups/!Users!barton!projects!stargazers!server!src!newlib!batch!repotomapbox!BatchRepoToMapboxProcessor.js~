'use strict';
require('regenerator/runtime');

import BaseClass from '../../BaseClass';

class BatchRepositoryByPageProcessor extends BaseClass{
  constructor() {
    super();
    this.limit = 3000; //number of milliseconds between requests: 30 requests / minute
  }
  
  init(access_token) {

    let self = this;
    
    self.queue.process(
      'batchRepositoryByPage'
        + '_'
        + access_token,
      1, 
      function(job,
               ctx,
               done) {

        self.gitHub.access_token = job.data.access_token;
        self.gitHub.id = job.data.id;

        //limit 30/minute
        let start = self.logger.now();
        self.gitHub.searchRepositories(
          '', //term
          '', //inFields
          '', //forks
          '' + job.data.minstars + '..' + job.data.maxstars,//stars
          '',//language
          'stars', //sort
          'desc', //order
          job.data.page)
        
          .then((result) => {
            return self.createBatchStargazersForRepoByPageJob(
              job,
              result);
          })
          .then((result) => {
            return self.createBatchRepositoryByPage(
              job,
              result);
          })
          .then(() => {
            return self.waitForRateLimit(
              'BatchRepositoryByPageProcessor.stars'
                + job.data.minstars
                + '-'
                + job.data.maxstars
                + '.'
                + job.data.page,
              start,
              self.limit);
          })
          .then(() => {
            done();
          })
          .catch((err) => {
            self.logger.error(
              'BatchRepositoryByPageProcessor',              
              {id: job.data.id,
               minstars: job.data.minstars,
               maxstars: job.data.maxstars,               
               page: job.data.page,
               error:err,
               access_token: self.access_token});
            
            self.needToPause(ctx, err);
            done(err);
          });
      } //function
    );//process
  }//init

  createBatchRepositoryByPage(job, result) {
    return new Promise((resolve, reject) => {
      try {
        if (result 
            && result.link
            && result.link.last
            && result.link.last.page) {

          let CreateBatchRepositoryByPage = require('./CreateBatchRepositoryByPage');
          let createBatchRepositoryByPageJob =
                CreateBatchRepositoryByPage.creator(job.data.access_token);

          let page = job.data.page + 1;

          createBatchRepositoryByPageJob.createJob(
            job.data.id,
            page,
            job.data.minstars,
            job.data.maxstars);
        }
        resolve(result);
      } catch(err) {
        reject(err);
      }
    });

  }
  createBatchStargazersForRepoByPageJob(job, result) {
    return new Promise((resolve, reject) => {
      try {
        
        if (result
            && result.json
            && result.json.items) {

          let CreateBatchStargazersForRepoByPageJob
                = require('../stargazer/CreateBatchStargazersForRepoByPageJob');

          let createBatchStargazersForRepoByPageJob
                = CreateBatchStargazersForRepoByPageJob.creator(job.data.access_token);
          
          //loop through and create getStarGazers              
          for (let repo of result.json.items) {
            let owner = repo.owner.login;
            let repoName = repo.name;

            createBatchStargazersForRepoByPageJob.createJob(
              job.data.id,                    
              owner,
              repoName,
              1);
          }//for
        }
        resolve(result);
      } catch (err) {
        reject(err);
      }
    });
  }
}
module.exports = BatchRepositoryByPageProcessor;
