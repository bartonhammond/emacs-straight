'use strict';

import  pako from 'pako';
import ProcessorClass from '../../ProcessorClass';
import _ from 'underscore';
import StarredData from './StarredData';

class Starred extends ProcessorClass{
  constructor() {
    super();
    this.latinize = require('latinize');
    this.limit = 800;//5000/hr 
  }
  
  run(job,
      ctx,
      done) {
    let self = this;
    self.job = job;

    self.gitHub.access_token = job.data.access_token;
    self.gitHub.id = job.data.id;

    let start = self.logger.now();
    
    try {
      self.gitHub.getStarred(
        job.data.login,
        job.data.page)
        .then((results) => {
          let repos = [];
          results.json.forEach((star) => {
            repos.push( star.full_name);
          });

          return self.saveResults(job, repos, results);
        }).then((results) => {
          //Go to next page
          return self.createStarred(
            job,
            results);

        }).then(() => {
          return self.waitForRateLimit(
            'getStarred' + job.data.login,
            start,
            self.limit);
        })
      
        .then(() => {
          done();
        })
      
        .catch((err) => {              
          self.needToPause(ctx, err)
            .then(() => {
              done();
              return self.createStarredAgain(job);
            })
            .catch((err) => {
              done(err);
              self.logger.error(
                'Starred.inside',              
                {id: job.data.id,
                 login: job.data.login,
                 error:err,
                 access_token: job.data.access_token});

            });
        });
      
    } catch (err) {
      done(err);          
      self.logger.error(
        'Starred',              
        {id: job.data.id,
         login: job.data.login,
         error:err,
         access_token: self.access_token});
    }

  } //init

  saveResults(job, repos, results) {
    let self = this;
    return new Promise((resolve, reject) => {
      try {
        let key = job.data.owner
              + ':'
              + job.data.repo;

        self.getRedisValue(self.redisKeyStarred,
                           key)
          .then((currentValues) => {

            if (!currentValues) {
              return  [];
            } else {
              return JSON.parse(pako.inflate(currentValues, { to: 'string' }));
            }
            
          })
          .then((values) => {
            let starredData = new StarredData(values);
            //go through structure and
            //update starred repos
            repos.forEach((starred) => {
              starredData.addStarred(starred, job.data.login);
            });

            let valuesToSave
                  = pako.deflate(JSON.stringify(starredData.data), {to: 'string'});
            
            self.redisClient.set(
              self.redisKeyStarred + key,
              valuesToSave);
            resolve(results);
          })
          .catch((err) => {
            reject(err);
          });

      } catch(err) {
        reject(err);
      }
    });
  }
  createStarredAgain(job) {
    let self = this;    
    return new Promise((resolve, reject) => {
      try {
        self.starred(job.data.page, job);
        resolve();
      } catch(err) {
        reject(err);
      }

    });
  }
  starred(page, job) {
    let CreateSplitter
          = require('../splitter/CreateSplitter');
    
    let createSplitter
          =  CreateSplitter.creator(job.data.access_token);
    
    createSplitter.createJob(
      'Starred',
      job.data.id,
      job.data.owner,
      job.data.repo,
      job.data.login,
      '',//starred_at
      page,
      job.data.repos);    
  }
  
  createStarred(job, result) {
    let self = this;
    return new Promise((resolve, reject) => {
      try {
        if (result 
            && result.link
            && result.link.last
            && result.link.last.page) {
          
          let page = job.data.page + 1;

          self.starred(page, job);
        }
        resolve(result);
      } catch(err) {
        reject(err);
      }

    });
  }  
}
module.exports = Starred;
