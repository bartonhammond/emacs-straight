'use strict';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux/native';
import Login from '../components/Login';
import Tabbar from '../components/Tabbar';
import * as authActions from '../auth/authActions';
import * as deviceActions from '../device/deviceActions';
import * as globalActions from '../global/globalActions';
import {Map} from 'immutable';
import GiftedSpinner from 'react-native-gifted-spinner';
import Subscribable from 'Subscribable';

import React,
{ 
  Image,
  StyleSheet,
  View
}
from 'react-native';
import {
  LOGGED_IN,
  LOGGED_OUT
} from '../constants';


const actions = [
  authActions,
  deviceActions,
  globalActions
];

function mapStateToProps(state) {
  return {
    ...state
  };
}

function mapDispatchToProps(dispatch) {

  const creators = Map()
    .merge(...actions)
    .filter(value => typeof value === 'function')
    .toObject();

    return {
    actions: bindActionCreators(creators, dispatch),
    dispatch
  };
}
let styles = StyleSheet.create({
  container: {
    flexDirection: 'column',
    flex: 1,
    backgroundColor: 'transparent'
  },
    header: {
    marginTop: 30,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent'
  },
  mark: {
    width: 150,
    height: 150
  }
});

let App = React.createClass({
  mixins: [Subscribable.Mixin],
  getInitialState() {
    return {
      loggedIn: false
    };
  },
  
  onLogin() {
    this.setState({
      loggedIn: true
    });
  },
  
  onLogout() {
    this.setState({
      loggedIn: false
    });
  },
  
  componentDidMount() {
    this.props.actions.getSessionToken();
    this.addListenerOn(this.props.global.eventEmitter, LOGGED_IN, this.onLogin);
    this.addListenerOn(this.props.global.eventEmitter, LOGGED_OUT, this.onLogout);
  },
  
  render () {
    if (this.props.auth.form.isFetching) {
      return (
        <View style={styles.container}>
          <View style={styles.header}>
            <Image style={styles.mark} source={{uri: 'http://i.imgur.com/da4G0Io.png'}} />
          </View>
          <GiftedSpinner />
        </View>
      );
    } else {
      if (!this.state.loggedIn) {
        return (
            <Login/>
        );
      } else {
        return (
          <Tabbar />
        );
      }
    }
  }
});

export default connect(mapStateToProps, mapDispatchToProps)(App);

