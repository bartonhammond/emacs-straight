'use strict';
require('regenerator/runtime');


import ProcessorClass from '../../ProcessorClass';
import Kue from 'kue';

import uuid from 'uuid';

class Runner extends ProcessorClass{
  constructor() {
    super();
    this.redisAppPartionKey = 'app:';
    this.redisRunnerKey = 'runner';
  }
  
  init() {
    let self = this;
    self.queue.process(
      'runner',
      1,
      function(job,
               ctx,
               done) {

        try {
          self.getCountOfJobsWithId(job.data.id)
            .then((count) => {
              console.log('onlinerunner.count',count);
              if (count && count === 1) {
                if (job.data.page === 0) {
                  //start the process 
                  self.createOnlineStargazersForRepoByPageJob(job);
                } else {
                  //we are now through processing
                  //read the data
                  //pass to mapboxdata
                  //send it to mongodb
                  //send it to s3
                }
                
                self.createOnlineRunnerJob(job);                                
              } else {
                self.createOnlineRunnerJob(job);                
              }

              done();            
            })
            .catch((err) => {
              console.log(err);
              done(err);
            });

        } catch(err) {
          self.logger.error(
            'rkunner',                
            {error: err});
          done(err);
        };
      });
  } //init
  /**
   * Kickoff the stargazers
   */
  createOnlineStargazersForRepoByPageJob(job) {
    return new Promise((resolve, reject) => {
      try {
        let CreateOnlineStargazersForRepoByPage =
              require('../stargazers/CreateOnlineStargazersForRepoByPage');
        
        let createOnlineStargazersForRepoByPage
              =
              CreateOnlineStargazersForRepoByPage.creator(job.data.access_token);
        
        createOnlineStargazersForRepoByPage.createJob(
          job.data.id,
          job.data.owner,
          job.data.repo,                  
          1); //pageu
        resolve();
      } catch(err) {
        reject(err);
      }

    });
  }
  
  createOnlineRunnerJob (job) {
    let CreateOnlineRunnerJob = require('./CreateOnlineRunnerJob');
    let createOnlineRunnerJob = CreateOnlineRunnerJob.creator(job.data.access_token);
    
    createOnlineRunnerJob.createJob(
      job.data.id,
      job.data.owner,
      job.data.repo,
      job.data.page
    );
  }
  createBatchRepositoryByPageJob(account_token, minstars, maxstars) {
    let CreateBatchRepositoryByPage =
          require('../repository/CreateBatchRepositoryByPage');
    
    let createBatchRepositoryByPage =
          CreateBatchRepositoryByPage.creator(account_token);
    
    
    createBatchRepositoryByPage.createJob(
      uuid.v4(),
      1,
      minstars,
      maxstars);
  }
  createRepoToMapboxJob(account_token, minstars, maxstars) {
    //kick off something like repository page
    //  for each entry kick off mapbox
    let CreateRepoToMapboxJob
          =  require('../repotomapbox/CreateRepoToMapboxJob');
    
    let createRepoToMapboxJob = CreateRepoToMapboxJob.creator(account_token);
    
    
    createRepoToMapboxJob.createJob(
      uuid.v4(),
      1,
      minstars,
      maxstars);
  }

  getCountOfJobsWithId(id) {
    let self = this;
    let jobs = [];
    let types = ['active','inactive','delayed'];
    types.forEach((type) => {
      jobs.push(self.getJobsByType(type));      
    });

    return Promise.all(jobs)
      .then((potentialJobs) => {
        let jobsWithMyId = 0;    
        potentialJobs.forEach((somejobs) => {
          if (somejobs) {
            somejobs.forEach((aJob) => {
              if (aJob.data.id === id) {
                jobsWithMyId++;
              }
            });
          }
        });
        return Promise.resolve(jobsWithMyId);
      })
      .catch((err) => {
        return Promise.reject(err);
      });
  }
  getJobsByType(type) {
    return new Promise((resolve,reject) => {
      try {
        Kue.Job.rangeByState( type, 0, 1000000, 'asc', function( err, jobs ) {
          if(err) {
            reject(err);
          }
          resolve(jobs);
        });
      } catch(err) {
        reject(err);
      }
    });
  }
  
}
module.exports = Runner;


