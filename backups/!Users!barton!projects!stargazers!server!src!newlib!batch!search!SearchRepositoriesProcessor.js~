'use strict';
require('regenerator/runtime');

import Bottleneck from 'bottleneck';
import CreateGetRepositoryByPageJob from '../repository/CreateGetRepositoryByPageJob';
import ProcessorClass from '../ProcessorClass';

class SearchRepositoriesProcessor extends ProcessorClass{
  constructor(queue, job, ctx, done) {
    super(queue, job, ctx, done, true);
    this.searchRepositoriesLimiter = new Bottleneck(1, 2400);
  }
  /**
   * When the first page request is through, we know 
   * how may other pages are available.
   * 
   * Create getRepositoryByPageJobs for each page
   *
   */
  onFirstComplete(result) {
    //save results
    let self = this;

    if (result
        && result.link
        && result.link.last
        && result.link.last.page) {
      self.lastPage = Number(result.link.last.page);
    }
    
    self.saveResults(result);

    //for each page create new job
    for (let currentPage = 2;
         currentPage <= self.lastPage;
         currentPage++) {
      
      //limit the speed
      self.searchRepositoriesLimiter.schedule(
        CreateGetRepositoryByPageJob.bind(self,
                                          self.queue,
                                          self.job.data.id,
                                          self.job.data.access_token,
                                          currentPage,
                                          self.job.data.minstars,
                                          self.job.data.maxstars))      
        .then((result) => {
          self.saveResults(result);
        })
        .catch((err) => {
          self.logger.error(
            {id: self.job.data.id,
             owner: self.job.data.owner,
             page: currentPage,
             error: err,
             minstars: self.job.data.minstars,
             maxstars: self.job.data.maxstars,             
             access_token: self.job.data.access_token},
             'SearchRepositoriesProcessor.CreateGetRepositoryByPageJob');                  
          self.done(err);
        });
    }//for loop
  }
  /**
   * Process the first page
   */
  run() {
    let self = this;
    CreateGetRepositoryByPageJob(
      self.queue,
      self.job.data.id,
      self.job.data.access_token,
      1,
      self.job.data.minstars,
      self.job.data.maxstars      
    )
      .then((result) => {
        self.onFirstComplete(result);
      })
      .catch((err) => {
        self.logger.error(
          {id: self.job.data.id,
           owner: self.job.data.owner,
           page: 1,
           error: err,
           minstars: self.job.data.minstars,
           maxstars: self.job.data.maxstars,
           access_token: self.job.data.access_token},
           'SearchRepositoriesProcessor.CreateGetRepositoryByPageJob');        
        self.saveResults();//one page - no data - done
      });
    

  }//run


}
module.exports = SearchRepositoriesProcessor;
