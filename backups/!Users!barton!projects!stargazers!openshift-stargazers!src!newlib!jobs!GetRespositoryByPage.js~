'use strict';
require('regenerator/runtime');
import GitHub from './GitHub';
import Bottleneck from 'bottleneck';

class SearchRepositories{
  constructor(queue) {
    this.queue = queue;
    this.gitHub = new GitHub();
    this.searchRepositoriesLimiter = new Bottleneck(1, 2200);
    this.results = [];
  }
  
  init() {
    let self = this;

    self.queue.process('SearchRepositories', 1, function(job, ctx, done) {
      console.log('repository.job.stars',job.stars);
      console.log('repository.job.language',job.language);

      //ratelimit the search requests at 30/min
      self.gitHub.searchRepositories(
        '', //term
        '', //inFields
        '', //forks
        '' + job.data.stars + '..' + job.data.stars,
        '' + job.data.language,
        'stars', //sort
        'desc', //order
        1)
      //get the first page
        .then((firstPage) => {
          debugger;
          self.results.push(...firstPage.results.json.items);
          //for each page create new job
          if (firstPage
              && firstPage.link
              && firstPage.link.last) {

            //Get the rest of the pages
            for (let currentPage = 2;
                 currentPage <= firstPage.link.last;
                 currentPage++) {

              //limit the speed
              self.searchRepositoriesLimiter.schedule(
                self.createJob.bind(
                  self,
                  currentPage,
                  job.data.stars,
                  job.data.language
                ));
              
            }
          }
        });
      

      //catch exception and pause until time restored

      done(null,{results: 'foo'});
    });
  }
  createJob(currentPage, stars, language) {
    return queue.create('getRespositoryByPage', {
      title: 'getRespositoryByPage: '  + currentPage,
      stars: stars,
      language: language
    }).save((err) => {
      console.log('searchRepositories.createJob.err',err);
    }).on('complete',(result) => {
      debugger;
      self.results.push(...result.json.items);
    });    
  }
  
}
module.exports = SearchRepositories;


