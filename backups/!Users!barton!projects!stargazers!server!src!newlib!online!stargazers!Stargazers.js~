'use strict';
require('regenerator/runtime');

import ProcessorClass from '../../ProcessorClass';

class Stargazers extends ProcessorClass{
  constructor() {
    super();
    //could go faster but the rate limit for github requests
    //are shared so run this slower as to not impact the
    //the user request 
    this.limit = 1200; 
  }
  
  init(access_token) {
    let self = this;

    self.queue.process(
      'stargazers'
        + '_'
        + access_token,      
      1,
      function(job,
               ctx,
               done) {

        try {
          self.gitHub.access_token = job.data.access_token;
          self.gitHub.id = job.data.id;

          let start = self.logger.now();
          self.gitHub.getStargazersByPage(
            job.data.owner,
            job.data.repo,
            job.data.page)
          
            .then((result) => {
              return self.getUsers(
                job,
                result);
            })
            .then((result) => {
              //next page
              return self.createStargazers(
                job,
                result);
            })
            .then(() => {
              return self.waitForRateLimit(
                'Stargazers'
                  + '.' + job.data.owner 
                  + '.' + job.data.repo
                  + '.' + job.data.page,              
                start,
                self.limit);
            })
            .then(() => {
              done();
            })
            .catch((err) => {
              self.needToPause(ctx, err)
                .then(() => {
                  done();
                  return self.createStargazersAgain(job);
                })
                .catch((err) => {
                  done(err);
                  self.logger.error(
                    'Stargazers.inner',              
                    {id: job.data.id,
                     owner: job.data.owner,
                     repo: job.data.repo,
                     page: job.data.page,
                     error:err,
                     access_token: self.access_token});
                });
            });
        } catch(err) {
          done(err);          
          self.logger.error(
            'Stargazers',              
            {id: job.data.id,
             owner: job.data.owner,
             repo: job.data.repo,
             page: job.data.page,
             error:err,
             access_token: self.access_token});
        }
      });
  }
  getUsers(job, result) {
    return new Promise((resolve, reject) => {
      try {
        if (result
            && result.json) {
          
          let CreateUser = require('../user/CreateUser');

          let createUser
                = CreateUser.creator(job.data.access_token);

          result.json.forEach((user) => {
            createUser.createJob(
              job.data.id,
              job.data.owner,
              job.data.repo,
              user.login);
          });
        }
        resolve(result);
      } catch(err) {
        reject(err);
      }
    });
  }
  createStargazers(job, result) {
    return new Promise((resolve, reject) => {
      try {
        if (result 
            && result.link
            && result.link.last
            && result.link.last.page) {

          let CreateStargazers 
              =  require('./CreateStargazers');
          
          let createStargazers
                =  CreateStargazers.creator(job.data.access_token);
          
          let page = job.data.page + 1;
          
          createStargazers.createJob(
            job.data.id,
            job.data.owner,
            job.data.repo,                  
            page);
        }
        resolve(result);
      } catch(err) {
        reject(err);
      }

    });
  }
  createStargazersAgain(job) {
    return new Promise((resolve, reject) => {
      try {
        let CreateStargazers =
              require('./CreateStargazers');
        
        let createStargazers
              =
              CreateStargazers.creator(job.data.access_token);
        
        createStargazers.createJob(
          job.data.id,
          job.data.owner,
          job.data.repo,                  
          job.data.page);

        resolve();
      } catch(err) {
        reject(err);
      }

    });
  }    
}
module.exports = Stargazers;


