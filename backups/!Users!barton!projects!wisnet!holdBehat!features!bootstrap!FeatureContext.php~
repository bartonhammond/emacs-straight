<?php
require_once __DIR__ . '/../../test/uwce/pageObjects/Masthead.class.php';
require_once __DIR__ . '/../../test/uwce/pageObjects/MastheadExtend.class.php';
require_once __DIR__ . '/../../test/uwce/pageObjects/Login.class.php';
require_once __DIR__ . '/../../test/uwce/pageObjects/Account.class.php';

use Facebook\WebDriver\Remote\DesiredCapabilities;
use Facebook\WebDriver\Remote\RemoteWebDriver;
use Facebook\WebDriver\WebDriverBy;

use Behat\Behat\Tester\Exception\PendingException;
use Behat\Behat\Context\Context;
use Behat\Gherkin\Node\PyStringNode;
use Behat\Gherkin\Node\TableNode;

/**
 * Defines application features from the specific context.
 */
class FeatureContext implements Context
{
    protected $localhost = 'http://0.0.0.0:4444/wd/hub';
    protected $driver;
    protected $home = "https://www.secured-site7.com/uwce-staging/www/fond-du-lac/catalog";
    protected $login = "https://www.secured-site7.com/uwce-staging/www/fond-du-lac/login";
    protected $admin = "https://www.secured-site7.com/uwce-staging/www/fond-du-lac/admin";
    protected $loginPage;
    protected $isMobile = false;
    protected $isLocal = true;
    /**
     * Initializes context.
     *
     * Every scenario gets its own context instance.
     * You can also pass arbitrary arguments to the
     * context constructor through behat.yml.
     */
    public function __construct()
    {
    }
    /**  @BeforeScenario   */
    public function before( $scope)
    {
        $this->driver = RemoteWebDriver::create($this->localhost,
                                                DesiredCapabilities::chrome(),
                                                50000,
                                                50000);
        
        $this->masthead = new MastheadExtend($this->driver,
                                             $this->isMobile,
                                             $this->isLocal);
        
        $this->loginPage = new Login($this->driver,
                                     $this->isMobile,
                                     $this->isLocal);

        $this->account = new Account($this->driver,
                                     $this->isMobile,
                                     $this->isLocal);        
    }
   /**   @AfterScenario  */
    public function after($scope)
    {
        //\Psy\Shell::debug(get_defined_vars(),$this);
        $this->driver->quit();
    }        
    /**
     * @Given I have a browser
     */
    public function iHaveABrowser()
    {
        if (!$this->driver) {
            throw new Exception("no browser");
        }
    }

    /**
     * @When I go to the :arg1 page
     */
    public function iGoToThePage($arg1)
    {
        if ('home' === $arg1) {
            $this->driver->get($this->home);
            $this->masthead->verifyPageLoaded();
            PHPUnit\Framework\TestCase::assertTrue($this->masthead->verifyPageUrl());
        }
        if ('login' === $arg1) {
            $this->driver->get($this->login);
            $this->loginPage->verifyPageLoaded();
            PHPUnit\Framework\TestCase::assertTrue($this->loginPage->verifyPageUrl());
            
        }
    }

    /**
     * @Then I should see :arg1 link
     */
    public function iShouldSeeLink($arg1)
    {
        PHPUnit\Framework\TestCase::assertNotNull(
            $this->driver->findElement(WebDriverBy::linkText($arg1)));
    }


    /**
     * @Given on Login I fill in :arg1 with :arg2
     */
    public function onLoginIFillInWith($arg1, $arg2)
    {
        if ($arg1 === 'username') {
            $this->loginPage->setUsername1TextField($arg2);
        }
        if ($arg1 === 'password') {
            $this->loginPage->setPassword1PasswordField($arg2);
        }
    }

    /**
     * @Given on Login I press :arg1
     */
    public function onLoginIPress($arg1)
    {
        if ($arg1 === 'Login') {
            $this->loginPage->clickLogInButton();
        }
    }

    /**
     * @Then I should be on the :arg1 page
     */
    public function iShouldBeOnThePage($arg1)
    {
        if ($arg1 === 'account') {
            $this->account->verifyPageLoaded();
            PHPUnit\Framework\TestCase::assertTrue($this->account->verifyPageUrl());
        }
    }
}
