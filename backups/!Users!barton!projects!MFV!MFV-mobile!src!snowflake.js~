'use strict';
/**
*  # native.js
*  Snowflake ![snowflake](https://cloud.githubusercontent.com/assets/1282364/11599365/1a1c39d2-9a8c-11e5-8819-bc1e48b30525.png)
*  
*  
 */

/**
* ## imports
* * ```Provider``` will tie the React-Native to the Redux store
* * ```App``` contains Login and TabBar
* * ```configureStore``` ties will connect the ```reducers```, the
 * ```thunk``` and the initial state.  
*/
import React, { AppRegistry } from 'react-native';
import { Provider } from 'react-redux/native';
import App from './containers/App';
import configureStore from './lib/configureStore';

/**
* ## Actions
*  The necessary actions for dispatching our bootstrap values
*/
import {setPlatform, setVersion} from './reducers/device/deviceActions';
import {setStore} from './reducers/global/globalActions';


/**
* ## initial state
* There are 4 initial states defined and together they make the Apps
 * initial state
 */

import authInitialState from './reducers/auth/authInitialState';
import deviceInitialState from './reducers/device/deviceInitialState';
import globalInitialState from './reducers/global/globalInitialState';
import profileInitialState from './reducers/profile/profileInitialState';

/**
*  ## The version of the app but not  displayed yet 
*/
var VERSION='0.0.18';

/**
*
* ##  the initial state
* 
*/
function getInitialState() {
    const _initState = {
    auth: new authInitialState,
    device: (new deviceInitialState).set('isMobile',true).set('version',VERSION),
    global: (new globalInitialState),
    profile: new profileInitialState
  };
  return _initState;
}
/**
 * ## native 
 *
 */
export default function native(platform) {

  let MyFamilyVoice = React.createClass( {
    render() {
      const store = configureStore(getInitialState());
      store.dispatch(setPlatform(platform));
      store.dispatch(setVersion(VERSION));
      store.dispatch(setStore(store));

      return (
          <Provider store={store}>
            {() => <App store={store}/>}
          </Provider>
      );

    }
  });

  AppRegistry.registerComponent('MyFamilyVoice', () => MyFamilyVoice);
}
