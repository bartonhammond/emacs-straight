'use strict';

import  pako from 'pako';
import ProcessorClass from '../../ProcessorClass';
import _ from 'underscore';

class Starred extends ProcessorClass{
  constructor() {
    super();
    this.latinize = require('latinize');
    this.limit = 800;//5000/hr 
  }
  
  init(access_token) {
    console.log('starred.init',access_token);
    let self = this;
    self.queue.process(
      'starred'
        + '-'
        + access_token,
      1,//3 batch, 10 online
      function(job,
               ctx,
               done) {

        console.log('starred job');
        self.job = job;

        self.gitHub.access_token = job.data.access_token;
        self.gitHub.id = job.data.id;

        let start = self.logger.now();
        
        try {
          self.gitHub.getStarred(
            job.data.login,
            job.data.page)
            .then((results) => {
              
              results.json.forEach((star) => {
                console.log(star.full_name);
                job.data.repos.push( star.full_name);
              });

              return self.createStarred(
                job,
                results);

            }).then(() => {
              return self.waitForRateLimit(
                'getStarred' + job.data.login,
                start,
                self.limit);
            })
          
            .then(() => {
              done();
            })
          
            .catch((err) => {              
              self.needToPause(ctx, err)
                .then(() => {
                  done();
                  return self.createStarredAgain(job);
                })
                .catch((err) => {
                  done(err);
                  self.logger.error(
                    'Starred.inside',              
                    {id: job.data.id,
                     login: job.data.login,
                     error:err,
                     access_token: self.access_token});

                });
            });
          
        } catch (err) {
          done(err);          
          self.logger.error(
            'Starred',              
            {id: job.data.id,
             login: job.data.login,
             error:err,
             access_token: self.access_token});
        }
      });
  } //init
  createStarredAgain(job) {
    return new Promise((resolve, reject) => {
      try {
        let CreateStarred =
              require('./CreateStarred');
        let createStarred
              = CreateStarred.creator(job.data.access_token);
        
        createStarred.createJob(
          job.data.id,
          job.data.login,
          job.data.page,
          job.data.repos);
        resolve();
      } catch(err) {
        reject(err);
      }

    });
  }

  createStarred(job, result) {
    return new Promise((resolve, reject) => {
      try {
        if (result 
            && result.link
            && result.link.last
            && result.link.last.page) {

          let CreateStarred 
              =  require('./CreateStarred');
          
          let createStarred
                =  CreateStarred.creator(job.data.access_token);
          
          let page = job.data.page + 1;
          
          createStarred.createJob(
            job.data.id,
            job.data.login,
            page,
            job.data.repos);
        }
        resolve(result);
      } catch(err) {
        reject(err);
      }

    });
  }  
}
module.exports = Starred;
