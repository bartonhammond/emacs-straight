<?php
namespace Automate;


/**
 * Establish the unique key of the desktop or mobile device so
 * that the last instance will be the most recent version since
 * BrowserStack returns the devices in increasing order
 */
class DeviceHashableObject implements \Ds\Hashable
{
    public $value;

    public function __construct($value) {
        $this->value = $value;
    }

    public function hash() {
        return $this->value;
    }

    public function equals($obj): bool {
        return
            $this->value->device === $obj->value->device //desktop or mobile
            &&
            $this->value->deviceName === $obj->value->deviceName //mobile
            &&
            $this->value->platformName === $obj->value->platformName //mobile
            //or desktop
            &&
            $this->value->browserName === $obj->value->browserName;
    
    }
}

/** 
 * Make a CURL call to retreive all the supported devices and 
 * loop through and retain those that satisfy the type requested 
 * by a customer
 */
class GetBrowsers
{
    public $username = '';
    public $authkey = '';
    public $url = 'https://crossbrowsertesting.com/api/v3/selenium/browsers';
    public $curlSupport;
    public $ch;
    
    public function __construct($username, $authkey) {
        $this->username = $username;
        $this->authkey = $authkey;
        $this->curlSupport = new CurlSupport($username, $authkey);
    }

    function endsWith($haystack, $needle) {
        $length = strlen($needle);
        
        return $length === 0 || 
                       (substr($haystack, -$length) === $needle);
    }
    
    public function get() {
        return $this->curlSupport->callApi($this->url);
    }

    public function makeMobileCapability($device,
                                         $browserName,
                                         $platformName,
                                         $deviceName) {
        $obj = new \stdClass();
        $obj->device = $device;
        $obj->browserName = $browserName;
        $obj->platformName = $platformName;
        $obj->deviceName = $deviceName;
        return $obj;
        
    }
    public function makeDesktopCapability($device,
                                          $browserName,
                                          $platform) {
        $obj = new \stdClass();
        $obj->device = $device;
        $obj->browserName = $browserName;
        $obj->platformName = $platform;
        $obj->deviceName = "";
        return $obj;
    }

    public function parse($jsonData, $option) {
        $map = new \Ds\Map();
    
        foreach ($jsonData as $device) {
            
            foreach ($device->browsers as $browser) {
                $test = '';

                switch($device->device) {
                case "mobile":
                    $test = $this->makeMobileCapability($device->device,
                                                        $browser->caps->browserName,
                                                        $device->caps->platformName,
                                                        $device->caps->deviceName);
                    break;
                
                case "desktop":
                    $test = $this->makeDesktopCapability($device->device,
                                                         $browser->caps->browserName,
                                                         $device->caps->platform);
                    break;
                }//switch
                
                switch (true) {
                case ( $option === "ios" || $option === 'modern' || $option === 'mobile') :
                    
                    if ($test->platformName === 'iOS') {

                        if ($test->deviceName === 'iPhone 7 Simulator'
                            ||
                            $test->deviceName === 'iPhone 7 Plus Simulator'
                            ||
                            $test->deviceName === 'iPad Pro Simulator'
                            ||
                            $test->deviceName === 'iPad Air 2 Simulator') {
                            $map->put(new \Automate\DeviceHashableObject($test),
                                      $test);
                        }
                    }
                    break;
                    
                case ($option === "android" || $option === 'modern' || $option === 'mobile'):
                    if ($test->platformName === 'Android') {
                        if ($test->deviceName === 'Galaxy S6'
                            ||
                            $test->deviceName === 'Nexus 6') {
                            $map->put(new \Automate\DeviceHashableObject($test),
                                      $test);
                        }
                    }
                    break;                    
                case ($option === "windows" || $option === 'modern' ||  $option === "desktop"):
                    if ($test->platformName === "Windows 10") {
                        $map->put(new \Automate\DeviceHashableObject($test),
                                  $test);
                    }
                    break;
                case ($option === "windows8"):
                    if ($test->platformName === "Windows 8") {
                        $map->put(new \Automate\DeviceHashableObject($test),
                                  $test);
                    }
                    break;
                case ($option === "windows81"):
                    if ($test->platformName === "Windows 8.1") {
                        $map->put(new \Automate\DeviceHashableObject($test),
                                  $test);
                    }
                    break;
                case ($option === "mac" || $option === 'modern' || $option==="desktop"):
                    if ($test->platformName === 'Mac OSX 10.13'
                        ||
                        $test->platformName === 'Mac OSX 10.12') {
                        
                        //                        if ($test->browserName !== "Safari") {
                            $map->put(new \Automate\DeviceHashableObject($test),
                                      $test);
                            //                        }
                    }
                    break;                    
                    
                case "all":
                    $map->put(new \Automate\DeviceHashableObject($test),
                              $test);                        
                    break;
                }
                
                //Uncomment for testing
                /*
                if (!$map->isEmpty()) {
                  return $map;///testing          
                  }
                */
            }//for each $device->browsers
        }//foreach $jsonData as $device
        
        return $map;
    }

    public function dump($devices) {
        $keys = $devices->keys();
    
        foreach ($keys as $key) {
            echo json_encode($devices->get($key)) . "\n";
        }
    }
}
